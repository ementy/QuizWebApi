// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20181106083217_UniqueAuthor")]
    partial class UniqueAuthor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.DbModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, FullName = "Albert Einstein" },
                        new { Id = 2, FullName = "Dr. Seuss" },
                        new { Id = 3, FullName = "Mahatma Gandhi" },
                        new { Id = 4, FullName = "Mark Twain" }
                    );
                });

            modelBuilder.Entity("Entities.DbModels.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new { Id = 1, AuthorId = 1, Content = "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe." },
                        new { Id = 2, AuthorId = 2, Content = "Don't cry because it's over, smile because it happened." },
                        new { Id = 3, AuthorId = 2, Content = "You know you're in love when you can't fall asleep because reality is finally better than your dreams." },
                        new { Id = 4, AuthorId = 3, Content = "Be the change that you wish to see in the world." },
                        new { Id = 5, AuthorId = 4, Content = "If you tell the truth, you don't have to remember anything" },
                        new { Id = 6, AuthorId = 3, Content = "Live as if you were to die tomorrow. Learn as if you were to live forever." }
                    );
                });

            modelBuilder.Entity("Entities.DbModels.Quote", b =>
                {
                    b.HasOne("Entities.DbModels.Author")
                        .WithMany("Quotes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
